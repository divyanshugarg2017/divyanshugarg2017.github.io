{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","multiplier","recovered","rgb","half_op","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","key","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountry","setCountries","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6a7c84f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n    console.log(title, active);\n    return (\n      <Card\n        onClick={props.onClick}\n        className={`infoBox ${active && \"infoBox--selected\"} ${\n          isRed && \"infoBox--red\"\n        }`}\n      >\n        <CardContent>\n          <Typography color=\"textSecondary\" gutterBottom>\n            {title}\n          </Typography>\n          <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n            {cases}\n          </h2>\n  \n          <Typography className=\"infoBox__total\" color=\"textSecondary\">\n            {total} Total\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  export default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle,Popup} from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 280,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      rgb: \"rgb(125, 215, 29)\",\r\n      half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 250,\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      rgb: \"rgb(251, 68, 67)\",\r\n      half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 400,\r\n    },\r\n  };\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n sortedData.sort((a,b) =>{\r\n    if (a.cases > b.cases){\r\n        return -1;\r\n    }\r\n    else{\r\n        return 1;\r\n    }\r\n })    \r\n return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react';\nimport './Map.css'\nimport {MapContainer as LeafletMap ,TileLayer} from \"react-leaflet\";\nimport {showDataOnMap} from \"./util\";\n\nfunction Map({countries,casesType,center,zoom}) {\n    return (\n        <div className =\"map\">\n            <LeafletMap key={center[0],zoom} center={center} zoom={zoom}>\n              {console.log(\"zoom  ar center\",zoom,center)}\n                <TileLayer\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                  {showDataOnMap(countries, casesType)}\n                {/*looping through the countries and drawing hotspts circles */}\n            </LeafletMap>\n        </div>\n    );\n}\n\nexport default Map;\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className =\"table\">\r\n            {countries.map(({country,cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Graph</h1>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import {MenuItem,FormControl,Select, Card, CardContent} from \"@material-ui/core\";\nimport React, { useEffect, useState } from 'react';\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport './App.css';\nimport { sortData,prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countries,setCountries] = useState([]);\n  const [countryInfo,setCountryInfo] = useState({});\n  const [tableData,setTableData] = useState([]);\n  let [mapCenter, setMapCenter] = useState([34.80746,-40.4796 ]);\n  const [mapZoom , setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  },[])\n     \n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n           }));\n\n           const sortedData =sortData(data);\n            setTableData(sortedData);\n            setMapCountries(data);\n            setCountries(countries);\n\n        })\n    };\n      getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if(countryCode===\"worldwide\"){\n          setMapCenter([34.80746,-40.4796 ])\n          setMapZoom(1)\n        }\n        else{\n          setMapCenter([data.countryInfo.lat,data.countryInfo['long']]);\n          setMapZoom(4);\n        }\n        \n       \n      });\n  };\n\n  console.log(\"countryinfoooo\",countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className = \"app__left\">\n      <div className = \"app__header\">\n      <h1>COVID TRACKER</h1>\n      <FormControl className = 'app__dropdown'>\n      <Select variant = \"outlined\" onChange = {onCountryChange}\n        value = {country}>\n      <MenuItem value = \"worldwide\">Worldwide</MenuItem>\n       \n\n          {/*loop through all the countries andshow dropdown list of them*/}\n\n          {\n            countries.map(country => (\n            <MenuItem value = {country.value}>{country.name}</MenuItem>\n            ))\n          }\n\n\n        </Select>\n      </FormControl>\n\n      </div>\n      <div className = \"app__stats\">\n        <InfoBox\n        isRed\n        active= {casesType===\"cases\"}\n        onClick={(e) => setCasesType(\"cases\")}\n         title = \"Coronavirus Cases\" \n         cases= {prettyPrintStat(countryInfo.todayCases)} \n         total  = {prettyPrintStat(countryInfo.cases)}\n         />\n\n        <InfoBox\n         active= {casesType===\"recovered\"}\n        onClick={(e) => setCasesType(\"recovered\")}\n         title = \"Recovered\" \n         cases= {prettyPrintStat(countryInfo.todayRecovered)} \n         total = {prettyPrintStat(countryInfo.recovered)}\n         />\n\n        <InfoBox \n        isRed\n         active= {casesType===\"deaths\"}\n        onClick={(e) => setCasesType(\"deaths\")}\n        title = \"Deaths\" \n        cases= {prettyPrintStat(countryInfo.deaths)}\n         total = {prettyPrintStat(countryInfo.deaths)}\n         />\n         \n      </div>\n     \n\n\n          {/*map*/}\n          <Map \n          casesType={casesType}\n          countries = {mapCountries}\n          center= {mapCenter}\n          zoom = {mapZoom}\n          />\n\n      </div>\n\n\n      <Card className = \"app__right\">\n         <CardContent>\n           <h3>live cases by country</h3>\n           <Table countries = {tableData}/>\n           <h3>worldwide new {casesType}</h3>\n           <LineGraph casesType={casesType}/>\n           {/*graph*/}\n\n         </CardContent>\n          \n         \n      </Card>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}